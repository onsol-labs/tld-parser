/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import * as web3 from '@solana/web3.js';

import { Tag, tagBeet } from '../types/tag';

/**
 * Arguments used to create {@link NftRecord}
 * @category Accounts
 * @category generated
 */
export type NftRecordArgs = {
    tag: Tag;
    bump: number;
    nameAccount: web3.PublicKey;
    owner: web3.PublicKey;
    nftMintAccount: web3.PublicKey;
    tldHouse: web3.PublicKey;
};

export const nftRecordDiscriminator = [174, 190, 114, 100, 177, 14, 90, 254];
/**
 * Holds the data for the {@link NftRecord} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class NftRecord implements NftRecordArgs {
    private constructor(
        readonly tag: Tag,
        readonly bump: number,
        readonly nameAccount: web3.PublicKey,
        readonly owner: web3.PublicKey,
        readonly nftMintAccount: web3.PublicKey,
        readonly tldHouse: web3.PublicKey,
    ) {}

    /**
     * Creates a {@link NftRecord} instance from the provided args.
     */
    static fromArgs(args: NftRecordArgs) {
        return new NftRecord(
            args.tag,
            args.bump,
            args.nameAccount,
            args.owner,
            args.nftMintAccount,
            args.tldHouse,
        );
    }

    /**
     * Deserializes the {@link NftRecord} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(
        accountInfo: web3.AccountInfo<Buffer>,
        offset = 0,
    ): [NftRecord, number] {
        return NftRecord.deserialize(accountInfo.data, offset);
    }

    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link NftRecord} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(
        connection: web3.Connection,
        address: web3.PublicKey,
    ): Promise<NftRecord> {
        const accountInfo = await connection.getAccountInfo(address);
        if (accountInfo == null) {
            throw new Error(`Unable to find NftRecord account at ${address}`);
        }
        return NftRecord.fromAccountInfo(accountInfo, 0)[0];
    }

    /**
     * Deserializes the {@link NftRecord} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset = 0): [NftRecord, number] {
        return nftRecordBeet.deserialize(buf, offset);
    }

    /**
     * Serializes the {@link NftRecord} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number] {
        return nftRecordBeet.serialize({
            accountDiscriminator: nftRecordDiscriminator,
            ...this,
        });
    }

    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link NftRecord}
     */
    static get byteSize() {
        return nftRecordBeet.byteSize;
    }

    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link NftRecord} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(
        connection: web3.Connection,
        commitment?: web3.Commitment,
    ): Promise<number> {
        return await connection.getMinimumBalanceForRentExemption(
            NftRecord.byteSize,
            commitment,
        );
    }

    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link NftRecord} data.
     */
    static hasCorrectByteSize(buf: Buffer, offset = 0) {
        return buf.byteLength - offset === NftRecord.byteSize;
    }

    /**
     * Returns a readable version of {@link NftRecord} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            tag: 'Tag.' + Tag[this.tag],
            bump: this.bump,
            nameAccount: this.nameAccount.toBase58(),
            owner: this.owner.toBase58(),
            nftMintAccount: this.nftMintAccount.toBase58(),
            tldHouse: this.tldHouse.toBase58(),
        };
    }
}

/**
 * @category Accounts
 * @category generated
 */
export const nftRecordBeet = new beet.BeetStruct<
    NftRecord,
    NftRecordArgs & {
        accountDiscriminator: number[] /* size: 8 */;
    }
>(
    [
        ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
        ['tag', tagBeet],
        ['bump', beet.u8],
        ['nameAccount', beetSolana.publicKey],
        ['owner', beetSolana.publicKey],
        ['nftMintAccount', beetSolana.publicKey],
        ['tldHouse', beetSolana.publicKey],
    ],
    NftRecord.fromArgs,
    'NftRecord',
);
